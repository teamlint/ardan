// Copyright {{year}} teamlint.com. All rights reserved.
// Code generated by ardan.

package {{.Setting.Repository}}

import (
	"errors"
	"log"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Model}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Model .Setting.Query}}"
	"xorm.io/xorm"
)

type DemoUserRepository struct {
	*xorm.Engine
}

func NewDemoUserRepository(db *xorm.Engine) *DemoUserRepository {
	return &DemoUserRepository{db}
}

// Insert insert item into database
func (r *DemoUserRepository) Insert(sess *xorm.Session, item *{{.Setting.Model}}.DemoUser) error {
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	_, err := sess.Insert(item)
	return err
}

// Inserts batch insert items into database
func (r *DemoUserRepository) Inserts(sess *xorm.Session, items []*{{.Setting.Model}}.DemoUser) error {
	if sess == nil {
		sess = r.NewSession()
	}
	_, err := sess.Insert(&items)
	return err
}

// Get get an item from database
func (r *DemoUserRepository) Get(sess *xorm.Session, id string, unscoped bool) (*{{.Setting.Model}}.DemoUser, error) {
	var item {{.Setting.Model}}.DemoUser
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	if id == "" {
		return nil, {{.Setting.Model}}.ErrPKNotFound
	}
	sess = sess.ID(id)
	if unscoped {
		sess = sess.Unscoped()
	}
	has, err := sess.Get(&item)
	if has {
		return &item, err
	}
	return nil, {{.Setting.Model}}.ErrNotFound
}

// GetBy 根据查询条件获取单条资源
func (r *DemoUserRepository) GetBy(sess *xorm.Session, query interface{}, args ...interface{}) (*{{.Setting.Model}}.DemoUser, error) {
	var item {{.Setting.Model}}.DemoUser
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
		sess = sess.OrderBy("id desc")
	}

	if query != nil {
		sess = sess.Where(query, args...)
	}
	has, err := sess.Get(&item)
	if has {
		return &item, err
	}
	return nil, {{.Setting.Model}}.ErrNotFound
}

// Find 获取资源列表
func (r *DemoUserRepository) Find(sess *xorm.Session, opts ...SessionOptions) ([]*{{.Setting.Model}}.DemoUser, error) {
	var items []*{{.Setting.Model}}.DemoUser
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
		sess = sess.OrderBy("id desc")
	}
	// options
	for _, opt := range opts {
		opt.Options(sess)
	}
	return items, sess.Find(&items)
}

// Paged 获取分页列表
func (r *DemoUserRepository) Paged(sess *xorm.Session, base *query.Base, opts ...SessionOptions) ([]*{{.Setting.Model}}.DemoUser, int64, error) {
	var items []*{{.Setting.Model}}.DemoUser
	var totals int64
	var err error
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	// query
	sess = base.Options(sess)
	// options
	for _, opt := range opts {
		opt.Options(sess)
	}
	totals, err = sess.FindAndCount(&items)
	if err != nil {
		return nil, totals, err
	}

	return items, totals, err
}

// UpdateData update to database use by map[string]interface{}
func (r *DemoUserRepository) UpdateData(sess *xorm.Session, id string, data {{.Setting.Model}}.Data) error {
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	if id == "" {
		return {{.Setting.Model}}.ErrPKNotFound
	}
	sess = sess.Table(new({{.Setting.Model}}.DemoUser)).ID(id)
	_, err := sess.Update(data)
	return err
}

// Update 更新指定列,如果不指定列,更新所有列
func (r *DemoUserRepository) Update(sess *xorm.Session, item *{{.Setting.Model}}.DemoUser, cols ...string) error {
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	if item.ID == "" {
		return {{.Setting.Model}}.ErrPKNotFound
	}
	sess = sess.ID(item.ID)
	if len(cols) > 0 {
		sess = sess.Cols(cols...)
	} else {
		sess = sess.AllCols()
	}
	_, err := sess.Update(item)
	return err
}

// Updates 更新所有
func (r *DemoUserRepository) Updates(sess *xorm.Session, item *{{.Setting.Model}}.DemoUser, opts ...SessionOptions) error {
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	for _, opt := range opts {
		opt.Options(sess)
	}
	_, err := sess.Update(item)
	return err
}

// Delete 删除
func (r *DemoUserRepository) Delete(sess *xorm.Session, id string, unscoped bool) error {
	if sess == nil {
		sess = r.NewSession()
		defer sess.Close()
	}
	if id == "" {
		return {{.Setting.Model}}.ErrPKNotFound
	}
	sess = sess.ID(id)
	if unscoped {
		sess = sess.Unscoped()
	}
	_, err := sess.Delete(new({{.Setting.Model}}.DemoUser))
	return err
}

