// Copyright {{year}} teamlint.com. All rights reserved.
// Code generated by ardan.

package {{.Setting.Controller}}

import (
	"net/http"

	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Model}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Model .Setting.Query}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Service}}"

	"github.com/jinzhu/copier"
	"github.com/rs/zerolog/log"
	"github.com/gin-gonic/gin"
	api "github.com/teamlint/ardan/pkg/http"
	"github.com/teamlint/ardan/server"
)

type DemoUserController struct{
	DemoUserService     {{.Setting.Service}}.DemoUserService

}

func NewDemoUserController(svc {{.Setting.Service}}.DemoUserService) *DemoUserController {
	return &DemoUserController{
		DemoUserService: svc,
	}
}

// server module register interface
func (c *DemoUserController) RegisterModule(s *server.Server) {
	g := s.Group("/demo-user")
	g.POST("/add", c.Add)
	g.POST("/save", c.Save)
	g.POST("/list", c.List)
	g.GET("/info/:id", c.Info)
}

func (c *DemoUserController) Add(ctx *gin.Context) {
	var err error
	params := struct {
		ID 				string 				 `json:"id" form:"id"`
		Username        string               `json:"username" form:"username"`
		IsApproved      bool       	         `json:"is_approved" form:"is_approved"`
		Email      		string               `json:"email" form:"email"`
		Gender       	{{.Setting.Model}}.Gender               `json:"gender" form:"gender"`
		Bio 			string               `json:"bio" form:"bio"`
		Phone 			string               `json:"phone" form:"phone"`
		Posts      		int64                `json:"posts" form:"posts"`
	}{}
	if err = ctx.ShouldBind(&params); err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","Add").Msg("cannot bind params")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数解析失败"))
		return
	}
	var item {{.Setting.Model}}.DemoUser
	if err = copier.Copy(&item, &params); err!=nil{
		log.Err(err).Str("controller","DemoUserController").Str("method","Add").Msg("cannot copy params")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数转换失败"))
		return
	}
	if item.ID == "" {
		item.ID = {{.Setting.Model}}.NewID()
	}
	if err = c.DemoUserService.Add(&item); err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","Add").Msg("cannot load service")
		ctx.JSON(http.StatusOK, api.NewResponseError("添加信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", item.ID))
}


func (c *DemoUserController) Save(ctx *gin.Context) {
	var err error
	params := struct {
		ID 				string 				 `json:"id" form:"id"`
		Username        string               `json:"username" form:"username"`
		IsApproved      bool       	         `json:"is_approved" form:"is_approved"`
		Email      		string               `json:"email" form:"email"`
		Gender       	{{.Setting.Model}}.Gender               `json:"gender" form:"gender"`
		Bio 			string               `json:"bio" form:"bio"`
		Phone 			string               `json:"phone" form:"phone"`
		Posts      		int64                `json:"posts" form:"posts"`
	}{}
	if err = ctx.ShouldBind(&params); err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","Save").Msg("cannot bind params")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数解析失败"))
		return
	}
	var item {{.Setting.Model}}.DemoUser
	if err = copier.Copy(&item, &params); err!=nil{
		log.Err(err).Str("controller","DemoUserController").Str("method","Save").Msg("cannot copy params")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数转换失败"))
		return
	}
	if err = c.DemoUserService.Save(&item); err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","Save").Msg("cannot load service")
		ctx.JSON(http.StatusOK, api.NewResponseError("保存信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", item.ID))
}

func (c *DemoUserController) List(ctx *gin.Context) {
	var err error
	params := struct {
		query.Base
		query.DemoUser
	}{}
	if err = ctx.ShouldBind(&params); err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","List").Msg("cannot bind params")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数解析失败"))
		return
	}
	var totals int64
	var items []*{{.Setting.Model}}.DemoUser
	items, totals, err = c.DemoUserService.Paged(&params.Base, &params.DemoUser)
	if err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","List").Msg("cannot load service")
		ctx.JSON(http.StatusOK, api.NewResponseError("获取资源列表信息失败"))
		return
	}
	result := {{.Setting.Model}}.PagedResult{
		Totals: totals,
		Items:  items,
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", result))
}
func (c *DemoUserController) Info(ctx *gin.Context) {
	var result *{{.Setting.Model}}.DemoUser
	var err error
	id := ctx.Param("id")
	result, err = c.DemoUserService.Get(id)
	if err != nil {
		log.Err(err).Str("controller","DemoUserController").Str("method","Info").Msg("cannot load service")
		ctx.JSON(http.StatusOK, api.NewResponseError("获取资源信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", result))
}
