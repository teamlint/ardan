// Copyright {{year}} teamlint.com. All rights reserved.
// Code generated by ardan.

package {{.Setting.Server}}

import (
	"flag"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/teamlint/ardan/config"
	"github.com/teamlint/container"

	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Repository}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Service}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.Server .Setting.Controller}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.Server .Setting.ServerModule}}"
	"{{import .Setting.GoMod .Setting.Output .Setting.Server .Setting.Middleware}}"
	"github.com/teamlint/ardan/server"
)

var (
	cfg = flag.String("config", "", "load config file")
)

// Start use teamlint container
func Start() {
	flag.Parse()
	// config
	if *cfg != "" {
		log.Printf("[ardan] config file is used: %v\n", *cfg)
		if err := config.LoadFile(*cfg); err != nil {
			panic(err)
		}
	}
	conf := config.Config()
	// container
	container.Build(
		// db
		container.Provide({{.Setting.Repository}}.NewDB),
		// repositories
		{{if .Setting.Sample}}
		container.Provide({{.Setting.Repository}}.NewDemoRepository),
		{{end}}
		// services
		{{if .Setting.Sample}}
		container.Provide({{.Setting.Service}}.NewDemoService),
		{{end}}
		// modules
		container.Provide({{.Setting.ServerModule}}.NewCORS, container.As(new(server.Module))),
		container.Provide({{.Setting.ServerModule}}.NewLogger, container.As(new(server.Module))),
		{{if .Setting.Sample}}
		container.Provide({{.Setting.ServerModule}}.NewSync, container.As(new(server.Module))),
		{{end}}
		// middlewares
		{{if .Setting.Sample}}
		container.Provide({{.Setting.Middleware}}.NewDemo, container.As(new(server.Module))),
		{{end}}
		// controllers
		container.Provide({{.Setting.Controller}}.NewHomeController, container.As(new(server.Module))),
		{{if .Setting.Sample}}
		container.Provide({{.Setting.Controller}}.NewDemoController, container.As(new(server.Module))),
		{{end}}

		// with modules server
		container.Provide(server.NewWithModules),
	)
	// http server
	var srv *server.Server
	container.MustExtract(&srv)
	s := srv.HttpServer(conf)
	// greaceful shutdown
	done := make(chan struct{}, 1)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM)
	go server.GracefulShutdown(s, quit, done, conf)
	log.Println("Server is ready to handle requests at", conf.Server.HttpAddr)
	if err := s.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("Could not listen on %s: %v\n", conf.Server.HttpAddr, err)
	}
	<-done
	log.Println("Server stopped")
}
