// Copyright {{year}} teamlint.com. All rights reserved.
// Code generated by ardan.

package middleware

import (
	"net/http"

	jwtlib "github.com/dgrijalva/jwt-go"
	jwtreq "github.com/dgrijalva/jwt-go/request"
	"github.com/gin-gonic/gin"
	"github.com/rs/zerolog/log"

	api "github.com/teamlint/ardan/pkg/http"
	"{{import .Setting.GoMod .Setting.Output .Setting.App .Setting.Service "jwt"}}"
)

func LoginRequired() gin.HandlerFunc {
	return func(ctx *gin.Context) {
		token, err := jwtreq.ParseFromRequest(ctx.Request, jwtreq.OAuth2Extractor, jwt.Secret)

		if err != nil {
			ctx.Abort()
			ctx.JSON(http.StatusUnauthorized, api.NewResponseError("用户未验证"))
			return
		}

		var loginID string
		if claims, ok := token.Claims.(jwtlib.MapClaims); ok && token.Valid {
			if val, ok := claims["id"]; ok {
				loginID = val.(string)
			}
		} else {
			ctx.Abort()
			ctx.JSON(http.StatusBadRequest, api.NewResponseError("用户账号无效"))
			return
		}

		ctx.Set("login.id", loginID)
		log.Debug().Str("middleware", "LoginRequired").Msgf("login.id=%s,token=%+v", loginID, *token)
	}
}
